<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>InSilecoMisc on inSileco</title>
    <link>https://insileco.github.io/rpkgs/insilecomisc/</link>
    <description>Recent content in InSilecoMisc on inSileco</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <copyright>2017-2024 inSileco</copyright>
    <lastBuildDate>Tue, 14 Apr 2020 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://insileco.github.io/rpkgs/insilecomisc/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>inSilecoMisc 0.4.0 (part 1/2)</title>
      <link>https://insileco.github.io/2020/04/14/insilecomisc-0.4.0-part-1/2/</link>
      <pubDate>Tue, 14 Apr 2020 00:00:00 +0000</pubDate>
      <guid>https://insileco.github.io/2020/04/14/insilecomisc-0.4.0-part-1/2/</guid>
      <description>&lt;h2 id=&#34;insilecomisc&#34;&gt;inSilecoMisc&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/inSileco/inSilecoMisc&#34;&gt;&lt;code&gt;inSilecoMisc&lt;/code&gt;&lt;/a&gt; is an R &amp;#x1f4e6; I&#xA;have been maintaining for four years now. It was originally designed as a&#xA;convenient way to share handy functions. Instead of stacking them in my&#xA;&lt;code&gt;.Rprofile&lt;/code&gt;, I created a package and made it available on GitHub. &lt;code&gt;inSilecoMisc&lt;/code&gt;&#xA;is therefore a set of miscellaneous functions, just as other R packages (e.g.&#xA;&lt;a href=&#34;https://CRAN.R-project.org/package=Hmisc&#34;&gt;&lt;code&gt;Hmisc&lt;/code&gt;&lt;/a&gt;) but as I frequently change its API,&#xA;it is meant to stay in the experimental stage! I like having &lt;code&gt;inSilecoMisc&lt;/code&gt; on&#xA;GitHub because it gives a large degree of freedom to experiment new ideas, new&#xA;functions and the code remains available and easy to install! Despite the &amp;ldquo;API&#xA;instability&amp;rdquo;, the overall quality of the package is constantly improving (at&#xA;least, I hope so &amp;#x1f604;). I have even included some of the somewhat more&#xA;matured functions in the research compendium of recent manuscripts&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Creating empty data frames with dfTemplate() and dfTemplateMatch()</title>
      <link>https://insileco.github.io/2019/02/03/creating-empty-data-frames-with-dftemplate-and-dftemplatematch/</link>
      <pubDate>Sun, 03 Feb 2019 00:00:00 +0000</pubDate>
      <guid>https://insileco.github.io/2019/02/03/creating-empty-data-frames-with-dftemplate-and-dftemplatematch/</guid>
      <description>&lt;p&gt;Creating a data frame is fairly simple but when you need to &lt;a href=&#34;https://stackoverflow.com/questions/10689055/create-an-empty-data-frame&#34;&gt;create a large empty data frame with columns that have different classes&lt;/a&gt; it takes several command lines. A few days ago, I decided to write a function to simplify this operation and I came to realize that such a function would actually be very useful to ease the row binding of data frames whose column names partially match. How so? This post is meant to answer this question!&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
