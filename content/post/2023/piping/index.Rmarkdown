---
title: A few thoughts about pipes in R
author: [kevin]
date: 2023-07-21
tags: [R, tips, pipe, internals]
rpkgs: [base, magrittr, dplyr]
tweet: "A few thoughts about piping in R"
review: true
estime: 5
bibliography: "`r path_ref_bib`"
csl: "`r path_ref_csl`"
tldr: |
    Using pipes in R makes your code cleaner. There are two good options for pipes: `magrittr` which brings the forward pipe `%>%` alongside four other pipes and the native pipe `|>` introduce in R 4.1.0. I have been piping for years, I started with the pipes from the `magrittr` package, now I use the native pipe.'
output:
  blogdown::html_page:
    dev: svglite
---



## Piping in R 

Back in 2014, I discovered the forward pipe for R introduced in [`magrittr`](https://magrittr.tidyverse.org/) and since that time, I have never stopped piping, though my piping habits evolved over time, especially with the [introduction of the native pipe](https://www.jumpingrivers.com/blog/new-features-r410-pipe-anonymous-functions/) in R 4.1. 

When I started using pipes in R, I had some experience with the [bash pipe](https://effective-shell.com/part-2-core-skills/thinking-in-pipelines/), `|`, which basically passes the output of a function to the input of a second one, and so allow to do chaining operations. But using pipes in R was a major breakthrough: with a simple infix operator, lines of code involving a collection of nested function calls was suddenly turned into one readable data recipe. Let's take an example and create a data pipeline where we apply a statistical model, `model_1()`, to the data set `data_1` after two steps of data preprocessing, `transform_1()` and `transform_2()`. Here is the code without pipes:

```R
res <- model_1(
    transform_2(
        transform_3(
            data_1
        )
    )
)
```

For now, let's refer to the forward pipe as `%pipe%`. With pipe, one would write

```R 
transform_3(data_1)
```

as

```R 
data_1 %pipe% transform_3()
```

`data_1` `transform` is the left hand side of the pipe (often abbreviated **lhs**) and `transform` is its right hand side (**lhs**). Let's rewrite the code using it:

```R
var <- data_1 %pipe%
    transform_1() %pipe%
    transform_2() %pipe%
    model_1()
```

Looking at the two blocks of code, there are two main facts, one quickly grasps: 

1. with pipes, you stop reading backwards: `data_1` is at the beginning of the block, and `model_1` is now at the last line, not at the first line;
2. with pipes, it is easier to deal with parentheses, the code is more readable.  

A little more subtle is that is it easier to comment out parts of the recipe. Say we need to comment out `transform_2()`, without pipes, we would to something like this 

```R
var <- model_1(
    #transform_2(
        transform_1(
            inti_var
        )
    #)
)
```

whereas with pipes, the code would look something like that: 

```R
var <- ini_var %pipe%
    transform_1() %pipe%
    #transform_2() %pipe%
    model_1()
```

This is not a major concern here, but it does help in more complex cases. Having code easy to read and easy to manipulate is particularly relevant for the R community because we are a group of data recipe writers and our recipes may include tens of steps. It is thus no surprise that the community [quickly adopted the magrittr's pipe](https://www.r-statistics.com/tag/stefan-milton/) and [tidyverse](https://www.tidyverse.org/) tremendously helped in popularizing the use of pipes in the community (e.g. see commit [`89aaa9a8b`](https://github.com/tidyverse/dplyr/commit/89aaa9a8b386d7e3705ffb682d89dc5bebe823c0) of `dplyr` on April 14<sup>th</sup>, 2014 where the magrittr pipe was adopted).



## magrittr pipes

### A package of internals 

I am assuming that most of R users are familiar with the forward pipe `%>%` and its placeholder `.` -- the symbols representing the object being forwarded. I am also assuming that most of R users have used it through the meta package [`tidyverse`](https://CRAN.R-project.org/package=tidyverse), or one of the packages included, most likely [`dpyr`](https://CRAN.R-project.org/package=dpyr). So here, instead of focusing on how to use the forward pipe, I would like to mention a few technical details as well as the other pipes `magrittr` includes.

[`magrittr`](https://CRAN.R-project.org/package=magrittr) is a package that brings the forward pipe `%>%` aklong with [four other pipes](https://magrittr.tidyverse.org/reference/index.html#pipes): `%<>%`, `%$%`, `%!>%`, `%T>%` as well as a [several functions](https://magrittr.tidyverse.org/reference/index.html#pipes) that can be used with the pipe. 

If you look at the source code, pipes are defined in [pipe.R](https://github.com/tidyverse/magrittr/blob/21093d06e43649a72b865811188e77fc8ad87780/R/pipe.R) and for instance the following lines defined the forward pipe (see [pipe.R L130-L137](https://github.com/tidyverse/magrittr/blob/21093d06e43649a72b865811188e77fc8ad87780/R/pipe.R#L130C1-L137)):


```R
`%>%` <- function(lhs, rhs) {
  lhs <- substitute(lhs)
  rhs <- substitute(rhs)
  kind <- 1L
  env <- parent.frame()
  lazy <- TRUE
  .External2(magrittr_pipe)
}
```

the last line is a call to the [primitive](https://cran.r-project.org/doc/manuals/r-release/R-ints.html#g_t_002eInternal-vs-_002ePrimitive) `.External2()` that will call an external C function, `magrittr_pipe()`, that is an R internal structure (a [SEXP](https://cran.r-project.org/doc/manuals/r-release/R-ints.html#SEXPs), see [Rinternals.h](https://github.com/wch/r-source/blob/23642aaf1e302ab6cb81b4f9ad8edbdcd6c44d4c/src/include/Rinternals.h#L4)). If you go to the folder source you will find the lines in 
[pipe.c](https://github.com/tidyverse/magrittr/blob/21093d06e43649a72b865811188e77fc8ad87780/src/pipe.c#L68) that define `magrittr_pipe()` :

```c
SEXP magrittr_pipe(SEXP call, SEXP op, SEXP args, SEXP rho) {
  args = CDR(args);
  [...]
}
```

Hence, when you load `magrittr`, you are using new internal functions including the forward pipe along with four others pipes: 

- `%<>%`: the [assignment pipe](https://magrittr.tidyverse.org/reference/compound.html) 
- `%$%` : the [exposition pipe](https://magrittr.tidyverse.org/reference/exposition.html)
- `%!>%`: the [eager pipe](https://magrittr.tidyverse.org/reference/pipe-eager.html)
- `%T>%`: the [Tee pipe](https://magrittr.tidyverse.org/reference/tee.html)


### The four additional pipes

Let's load `magrittr` and let me give an example for these pipes. The **assignment pipe** allows you to assign the value while piping. Here is a example where you would use two steps in your data pipeline to modify the dataset [CO2](https://stat.ethz.ch/R-manual/R-devel/library/datasets/html/zCO2.html).


```{R assignement}
library(magrittr)
library(dplyr)
library(datasets) # CO2 is included in this package
CO2b <- CO2 %>%
    filter(conc > 200)
dim(CO2b)
CO2b <- CO2b %>%
    mutate(conc2 = 2 * conc)
head(CO2b)
```

With the assignment pipe you can use `CO2b %<>%` instead of `CO2b <- CO2b`

```{R assignment}
CO2c <- CO2 %>%
    filter(conc > 200)
dim(CO2c)
CO2c %<>% mutate(conc2 = 2 * conc)
identical(CO2b, CO2c) # check whether we are creating the same object
```


With the **Tee pipe**, you can call a function but the output could is not included in the pipeline, but you can still benefit from the side effect of the function, which is very useful for print and plot functions. 

```{R tee}
CO2d <- CO2 %>%
    filter(conc > 200) %>%
    mutate(conc2 = 2 * conc) %T>%
    print(max = 50)
identical(CO2d, CO2c)
```

The **exposition pipe** exposes the names of the object being pipes (lhs) and so they can be called from the rhs of the pipe.

```{R dollar, error = TRUE}
CO2 %>%
    head() %>%
    print(conc) # does not work
CO2 %>%
    head() %$%
    print(conc)
```


Finally, the **eager pipe** overcomes the lazy evaluation behaviour in R. It is beyond the scope of this post to explain what is it, but if you are curious, have a look at this [great blog post by Collin Fay](https://colinfay.me/lazyeval/). So here is an example where two functions that prompt a message on evaluation (check the order of the messages):


```{R eager, message = TRUE}
trans1 <- function(x) {
    cat("------- 1. trans1\n")
    x$nrow <- nrow(x)
    x
}
trans2 <- function(x) {
    cat("------- 2. trans2\n")
    head(x, 4)
}
# with the forward pipe (functions are evaluated lazyly)
CO2e <- CO2 %>%
    trans1() %>%
    trans2()
# with the eager pipe (functions are evaluated eagerly)
CO2f <- CO2 %!>%
    trans1() %!>%
    trans2()
# final outputs are the same
CO2f
identical(CO2e, CO2f)
```




## The native pipe 

R 4.1 introduced the native pipe `|>`. In the [NEWS file](https://cran.r-project.org/doc/manuals/r-devel/NEWS.html), section *CHANGES IN R 4.1.0*, the pipe was announced with the following message :

> R now provides a simple native forward pipe syntax |>. The simple form of the forward pipe inserts the left-hand side as the first argument in the right-hand side call. The pipe implementation as a syntax transformation was motivated by suggestions from Jim Hester and Lionel Henry. 

Several blog posts have explained how to use it (e.g. this [blog post on Towards data science](https://towardsdatascience.com/understanding-the-native-r-pipe-98dea6d8b61b)). I was curious about what were the changes that come with such new feature, so I did a quick search in the source code (using the mirror available on GitHub at https://github.com/wch/r-source):

```sh
git log --oneline -S 'native pipe'

263d6bcf0b Use => syntax to pass pipe lhs to non-first-argument on rhs.
a1425adea5 Added native pipe and function shorthand syntax.
```

I then checked the files modified  in commit `a1425adea5`:

```sh
git show --name-only a1425adea5 
commit a1425adea54bcc98eef86081522b5dbb3e149cdc
Author: luke <luke@00db46b3-68df-0310-9c12-caf00c1e9a41>
Date:   Thu Dec 3 22:59:31 2020 +0000
 
    Added native pipe and function shorthand syntax.
    
    git-svn-id: https://svn.r-project.org/R/trunk@79553 00db46b3-68df-0310-9c12-caf00c1e9a41
 
doc/NEWS.Rd
src/include/Rinternals.h
src/library/base/man/function.Rd
src/library/base/man/pipeOp.Rd
src/main/gram.c
src/main/gram.y
src/main/names.c
```

Commit [`a1425adea54bcc98eef86081522b5dbb3e149cdc`](https://github.com/wch/r-source/commit/a1425adea54bcc98eef86081522b5dbb3e149cdc) introduced the pipe  and 7 files were modified to do so. Note that `git show` one can quickly check all the changes: 

```sh 
git show a1425adea54bcc98eef86081522b5dbb3e149cdc
```

and with `-- path` one may focus on a specific file:

```sh
git show a1425adea54bcc98eef86081522b5dbb3e149cdc -- src/include/Rinternals.h

commit a1425adea54bcc98eef86081522b5dbb3e149cdc
Author: luke <luke@00db46b3-68df-0310-9c12-caf00c1e9a41>
Date:   Thu Dec 3 22:59:31 2020 +0000
 
    Added native pipe and function shorthand syntax.
    
    
    git-svn-id: https://svn.r-project.org/R/trunk@79553 00db46b3-68df-0310-9c12-caf00c1e9a41
 
diff --git a/src/include/Rinternals.h b/src/include/Rinternals.h
index 143cf24ab7..0a5e446b0e 100644
--- a/src/include/Rinternals.h
+++ b/src/include/Rinternals.h
@@ -1034,6 +1034,7 @@ LibExtern SEXP    R_DotsSymbol;       /* "..." */
 LibExtern SEXP R_DoubleColonSymbol;// "::"
 LibExtern SEXP R_DropSymbol;       /* "drop" */
 LibExtern SEXP R_EvalSymbol;       /* "eval" */
+LibExtern SEXP R_FunctionSymbol;   /* "function" */
 LibExtern SEXP R_LastvalueSymbol;  /* ".Last.value" */
 LibExtern SEXP R_LevelsSymbol;     /* "levels" */
 LibExtern SEXP R_ModeSymbol;       /* "mode" */
```

Investigating further, I found that the symbol `|>` is declared in `names.c` and that `xxpipe()` is basically the definition of the pipe (see `gram.y`).

```c
static SEXP    xxpipe(SEXP, SEXP);
/* [...] */

static SEXP xxpipe(SEXP lhs, SEXP rhs) {
    SEXP ans;
    if (GenerateCode) {
       /* allow for rhs lambda expressions */
       if (TYPEOF(rhs) == LANGSXP && CAR(rhs) == R_FunctionSymbol)
           return lang2(rhs, lhs);
                   
       if (TYPEOF(rhs) != LANGSXP)
           error(_("The pipe operator requires a function call "
                   "or an anonymous function expression as RHS"));

        SEXP fun = CAR(rhs);
        SEXP args = CDR(rhs);


       /* rule out syntactically special functions */
       /* the IS_SPECIAL_SYMBOL bit is set in names.c */
       if (TYPEOF(fun) == SYMSXP && IS_SPECIAL_SYMBOL(fun))
           error("function '%s' not supported in RHS call of a pipe",
                 CHAR(PRINTNAME(fun)));
       
       PRESERVE_SV(ans = lcons(fun, lcons(lhs, args)));
    }
    else {
       PRESERVE_SV(ans = R_NilValue);
    }
    RELEASE_SV(lhs);
    RELEASE_SV(rhs);
    return ans;
}
```

And this is the code that makes the pipe working. 

```{R native}
CO2g <- CO2 |>
    filter(conc > 200) |>
    mutate(conc2 = 2 * conc)
identical(CO2g, CO2b)
```

and though I don't see any advantages of doing so, it is possible to combine the two pipes.

```{R mix}
CO2h <- CO2 |>
    filter(conc > 200) %>%
    mutate(conc2 = 2 * conc)
identical(CO2h, CO2b)
```

Even if the code of `xxpipe()` has changed in R 4.3.2 and 4.3.3, we can still demonstrate how to hit the two errors captured in the code (though the error messages are slightly different):

```{R pipe_error1, error = TRUE}
CO2 |> head
```

```{R pipe_error2, error = TRUE}
CO2 |> `+`()
```


One of the main reason for the changes in the `xxpipe()` code is the recent introduction of the placeholder, `_`, in R 4.2.0 (see [*CHANGES IN R 4.2.0* in the NEWS file](https://cran.r-project.org/doc/manuals/r-devel/NEWS.html)):

> In a forward pipe |> expression it is now possible to use a named argument with the placeholder _ in the rhs call to specify where the lhs is to be inserted. The placeholder can only appear once on the rhs.

Placeholder that was recently updated (see [*CHANGES IN R 4.3.0* NEWS file](https://cran.r-project.org/doc/manuals/r-devel/NEWS.html)):

> As an experimental feature the placeholder _ can now also be used in the rhs of a forward pipe |> expression as the first argument in an extraction call, such as _$coef. More generally, it can be used as the head of a chain of extractions, such as _$coef[[2]].


So here is an example of what can be done in R>4.3.0.

```{R placeholder, error = TRUE}
CO2 |>
    _$conc |>
    sum()
```

On top of making my code cleaner and easier to comment out, when I am coding in the console I have been using more and more frequently the operator `->`, that really comes in handy. You may be aware that R has multiple [assignment operators](https://stat.ethz.ch/R-manual/R-devel/library/base/html/assignOps.html), for historical reasons as mentioned by [@chambers_2016_Extending] (page 73 in a footnote): 

> The specific choice of `<-` dates back to the first version of S. We chose it in order to emphasize that the left and right operands are entirely different: a target on the left and a computed value on the right. Later versions of S and R accept the `=` operator, but for exposition the original choice remains clearer.

R users mainly use `<-` and sometimes `=` (frequently used by users that have experience with other programming languages), but `->` feels especially appropriate when piping as it concludes well the data recipe. 


```{R thirdassign, error = TRUE}
CO2 |>
    _$conc |>
    sum() -> tot_conc
tot_conc
```


## Final remarks

I this post I wrote down a few thoughts about the native pipe and the magrittr pipes. I did not attempt to compare the two. The main differences between the two pipes `%>%` and `|>` are summarized in one of [Hadley Wickham recent blog post](https://www.tidyverse.org/blog/2023/04/base-vs-magrittr-pipe/). Of course there is only one native pipe and 5 magrittr pipes. But the most significative difference regards the placeholders, `.` coming with more features than `_`. That said, given the latest experimental feature of `_` in R 4.3.0, this may soon no longer hold true.

The tidyverse community still uses and recommends the use of the magrittr forward pipe, and even provide a styling guide for it: https://style.tidyverse.org/pipes.html. I now code almost exclusively with the native pipe (following the same guidelines). I apply it everywhere and I have a bunch of shortcuts for function I use the most frequently in the console, e.g. to do `|> names()` or `|> class()`. I prefer `|>` mostly because it is native, meaning that I don't need to load any package to use it. There are two additional minor pros: it is only two characters and [Julia](https://docs.julialang.org/en/v1/manual/functions/) -- which I use frequently -- uses the same symbol. I even use it in packages and as long I not using the placeholder, the package only requires a version >= R 4.3.1 which is not bad (the oldrel is currently R 4.2.3).



## References

<div id="refs"></div>

```{R sessionInfo, child = path_session_info}
```
