---
title: "inSilecoMisc 0.4.0 (part 1/2)"
author: [kevin]
reviewer: [steve]
date: 2020-04-14
tags: [R, package, development, inSilecoMisc]
rpkgs: [remotes, inSilecoMisc]
tweet: "inSilecoMisc 0.4.0 (part 1/2)"
rbloggers: true
estime: 8
output:
  rmarkdown::html_page:
    toc: true
    fig_width: 3
    dev: svglite
---


## inSilecoMisc

[`inSilecoMisc`](https://github.com/inSileco/inSilecoMisc) is an R :package: I
have been maintaining for four years now. It was originally designed as a
convenient way to share handy functions. Instead of stacking them in my
`.Rprofile`, I created a package and made it available on GitHub. `inSilecoMisc`
is therefore a set of miscellaneous functions, just as other R packages (e.g.
`r url_cran("Hmisc")`) but as I frequently change its API,
it is meant to stay in the experimental stage! I like having `inSilecoMisc` on
GitHub because it gives a large degree of freedom to experiment new ideas, new
functions and the code remains available and easy to install! Despite the "API
instability", the overall quality of the package is constantly improving (at
least, I hope so :smile:). I have even included some of the somewhat more
matured functions in the research compendium of recent manuscripts[^n1].

Over the last month, I made substantial changes throughout the package. I
re-wrote some functions, improved the documentation of others and added new
features. I also changed the way the [pkgdown
website is deployed](https://kevcaz.github.io/notes/ci/deploypkgdown2/) by
[Travis](https://travis-ci.org/github/inSileco/inSilecoMisc). In what follows, I introduced several functions included in
versions 0.4.0. Note that as `inSilecoMisc` is on GitHub, an easy way
to install `inSilecoMisc` is provided by the package
[`remotes`](https://cran.r-project.org/web/packages/remotes/index.html)


```R
install.packages("remotes") # if not already installed
remotes::install_github("inSileco/inSilecoMisc")
```

Once installed, let's load it!

```{R}
library("inSilecoMisc")
packageVersion("inSilecoMisc")
```


## adjustStrings

As an ecologist, I frequently work with multiple datasets, and I often need to
name/rename a bunch of files. One function I often use to do so is `sprintf()`:

```{R}
sprintf("file_%02d", 1:10)
```

I originally designed
[`adjustStrings()`](https://insileco.github.io/inSilecoMisc/reference/adjustStrings.html)
to adjust the number of 0 to a string in a similar fashion:

```{R}
adjustStrings(1:10, n = 2)
```

But I was rapidly interested in having a more flexible function. So, I added several parameters to do that!
In the last version of `inSilecoMisc`, `adjustStrings()` have 5 arguments:

1. `x`: the input character vector to be adjusted;
2. `n`: the number of characters to be added or used to determine the length of output strings;
3. `extra`: the character(s) to be added (`0` is the default value);
4. `align`: the string alignment ("right", "left" or "center");
5. `add`: whether `n` should be the constraint or a number of characters to be added (a constraint by default).


By default, `adjustStrings()` uses `n` as a constrain for the length of the output strings. so if use `n = 4` instead of `n = 2` in the first example, all
elements of the output vector will have 4 characters:

```{R n}
adjustStrings(1:10, n = 4)
```

Add I change the value of `extra` to specify the replacement character(s) to be used :

```{R extra}
adjustStrings(1:10, n = 4, extra = 1)
adjustStrings(1:10, n = 4, extra = "a")
adjustStrings(1:10, n = 4, extra = "-")
adjustStrings(1:10, n = 4, extra = "ab")
```

With `align`, I can choose where extra characters are added:


```{R align}
adjustStrings(1:10, n = 4, extra = "-", align = "right") # default
adjustStrings(1:10, n = 4, extra = "-", align = "left")
adjustStrings(1:10, n = 4, extra = "-", align = "center")
```

Also, if `add = TRUE`, then exactly `n` extra characters are added:

```{R add}
adjustStrings(1:10, n = 4, extra = "-", align = "right", add = TRUE)
adjustStrings(1:10, n = 4, extra = "-", align = "left", add = TRUE)
adjustStrings(1:10, n = 4, extra = "-", align = "center", add = TRUE)
```

Note that in this last case, lengths of output character strings may differ!
One last remark about how `adjustStrings()` works when `add = FALSE`: for a given string, there are 3 scenarios :

1. the string to be adjusted has more characters than `n`; in this case, the string is simply cut off:

```{R}
adjustStrings("ABCD", n = 2, extra = "efgh")
```

2. the string has more characters but the number of character for the adjustment is smaller than the number of `extra`'s character; in this case, `extra` is cut off:

```{R}
adjustStrings("ABCD", n = 6, extra = "efgh")
```

3. finally, when `extra` is too short to adjust the string according to `n`, `extra` is repeated:

 ```{R}
 adjustStrings("ABCD", n = 14, extra = "efgh")
 ```


These combinations give flexibility to the user. One application of the
`adjustStrings()` function comes when running a long script. In such situation,
it is convenient to create recognizable code section to ease the navigation
across long output!

```{R, results = "hold"}
report <- function(title, symbol = "#") {
  cat(adjustStrings(title, 70, symbol, align = "center"), "\n")
}
report(" part 1 ")
report(" Solving ODE ", "~")
report(" Last but not least! ", "=")
```


## keepWords

[`keepWords()`](https://insileco.github.io/inSilecoMisc/reference/keepWords.html) allows the user to select words based on their position in
character strings. Before using it, I would like to introduce `loremIpsum()`
that generates [placeholder texts](https://en.wikipedia.org/wiki/Lorem_ipsum).
Note that there are several functions to generate placeholder texts available
elsewhere. For instance, `stringi` has
[`stri_rand_lipsum()`](https://jangorecki.gitlab.io/data.cube/library/stringi/html/stri_rand_lipsum.html)
and [`UsingR` includes
`lorem()`](https://www.rdocumentation.org/packages/UsingR/versions/2.0-6/topics/lorem).
By default, this `loremIpsum()` function returns two paragraphs of text:

```{R}
cat(loremIpsum())
```
but it also allows the user to set the number of words of the character string returned:

```{R}
loremIpsum(18)
```

Note the escape characters (`\n`)! Now let's focus on `keepWords()`. Assuming I
want to extract the second word in both sentences `loremIpsum(18)` and `be or not to be`, all I have to do is:



```{R}
keepWords(c(loremIpsum(18), "be or not to be"), 2)
```

and if I am interested in extracting specific word positions, I can pass a numerical vector:

```{R}
keepWords(c(loremIpsum(18), "be or not to be"), c(1:4, 12:16))
```

As you may have noted, `NA`s are added when the position selected does not
exist. This behavior could be useful but also annoying! Fortunately, an
argument allows to remove `NA`s.


```{R}
keepWords(c(loremIpsum(18), "be or not to be"), c(1:4, 12:16), na.rm = TRUE)
```

Also, `collapse` allows the user to change the character used to separate words:


```{R}
keepWords(loremIpsum(18), c(1:6, 14:18), collapse = "-")
```

and if `collapse = NULL` then list will be returned including a vector of the selected words per input string:

```{R}
keepWords(c(loremIpsum(18), "be or not to be"), c(2:3), collapse = NULL)
```

Note that all punctuation characters will be removed. This can be changed by tweaking argument `split_words`!


There are two other functions that work similarly: `keepLetters()` and `keepInitials()`. The former selects letters instead of words.


```{R}
keepLetters(loremIpsum(18), c(1:6, 14:18))
keepLetters(loremIpsum(18), c(1:6, 14:18), collapse = "-")
keepLetters(loremIpsum(18), c(1:6, 14:18), collapse = NULL)
```

while the latter extracts initials

```{R}
keepInitials("National Basketball Association")
keepInitials("National Basketball Association", "-")
```

Note that if the input character vector has a mixture of lower and upper case, so will the output

```{R}
keepInitials("National basketball association")
```

if this annoys you, base functions `upper()` and `lower()` come in handy!

```{R}
keepInitials(tolower("National basketball association"))
keepInitials(toupper("National basketball association"))
```


<br>


## Concluding remarks

In this post, I focused on `inSileco`'s functions that manipulate character
strings (all of them call
[`str_split()`](https://stat.ethz.ch/R-manual/R-devel/library/base/html/strsplit.html)
at some point). If you are interested in learning more about strings
manipulations, you should checkout the ebook ["Handling Strings with
R"](https://www.gastonsanchez.com/r4strings/) by [Gaston
Sanchez](https://www.gastonsanchez.com/). There are also various blog posts on
this topic (for instance
[http://uc-r.github.io](http://uc-r.github.io/string_manipulation_baseR/) or on
[data-flair](https://data-flair.training/blogs/r-string-manipulation/)) and, obviously, the documentation of packages that do such manipulations (e.g. `r url_cran("stringi")`).

This concludes the first part of this post, additional features of the
`inSilecoMisc` package will be introduced the second part of this post :tada:!


```{R sessionInfo, child = path_session_info}
```



[^n1]: see the following <i class="fa fa-github" aria-hidden="true"></i>
repositories:
[HomogenFishOntario](https://github.com/McCannLab/HomogenFishOntario) and
[coocc_not_inter](https://github.com/TheoreticalEcosystemEcology/coocc_not_inter).
